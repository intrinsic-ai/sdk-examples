module(name="examples")

bazel_dep(name = "ai_intrinsic_sdks")
archive_override(
  module_name = "ai_intrinsic_sdks",
  urls = "https://github.com/intrinsic-dev/sdk/archive/refs/heads/main.tar.gz",
  strip_prefix = "sdk-main/"
)

# Direct dependencies
bazel_dep(name = "platforms", version = "0.0.9")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "abseil-cpp", version = "20240116.2", repo_name = "com_google_absl")
bazel_dep(name = "abseil-py", version = "2.1.0", repo_name = "com_google_absl_py")
bazel_dep(name = "rules_proto", version = "6.0.0")
bazel_dep(name = "protobuf", version = "26.0.bcr.2", repo_name = "com_google_protobuf")
bazel_dep(name = "grpc", version = "1.65.0", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "rules_pkg", version = "0.9.1")

# C++ toolchain
bazel_dep(name = "toolchains_llvm", version = "1.0.0")
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "14.0.0",
)
non_module_deps = use_extension("@ai_intrinsic_sdks//bazel:non_module_deps.bzl", "non_module_deps_ext")
use_repo(non_module_deps, "com_googleapis_storage_chrome_linux_amd64_sysroot")
llvm.sysroot(
    label = "@com_googleapis_storage_chrome_linux_amd64_sysroot//:all_files",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain")
register_toolchains("@llvm_toolchain//:all")

bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")

# Google API bindings
bazel_dep(name = "googleapis", version = "0.0.0-20240326-1c8d509c5", repo_name = "com_google_googleapis")
switched_rules = use_extension("@com_google_googleapis//:extensions.bzl", "switched_rules")
switched_rules.use_languages(
    cc = True,
    go = False,
    grpc = True,
    python = True,
)
use_repo(switched_rules, "com_google_googleapis_imports")

##########
# Go
##########

bazel_dep(name = "rules_go", version = "0.49.0", repo_name = "io_bazel_rules_go")

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.22.1")

bazel_dep(name = "gazelle", version = "0.36.0", repo_name = "bazel_gazelle")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
use_repo(
    go_deps,
    "com_google_cloud_go_longrunning",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
)

##########
# Python
##########

bazel_dep(name = "rules_python", version = "0.31.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

python.toolchain(
    is_default = True,
    python_version = "3.11",
)
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "scan_barcodes_pip_deps",
    python_version = "3.11",
    requirements_lock = "//skills/scan_barcodes:requirements.txt"
)
use_repo(pip, "scan_barcodes_pip_deps")

pip.parse(
    hub_name = "stopwatch_pip_deps",
    python_version = "3.11",
    requirements_lock = "//services/stopwatch:requirements.txt"
)
use_repo(pip, "stopwatch_pip_deps")

##########
# Containers
##########

bazel_dep(name = "rules_oci", version = "1.8.0")

extension_for_rules_oci = use_extension("@ai_intrinsic_sdks//bazel:extension_for_rules_oci.bzl", "extension_for_rules_oci_ext")
use_repo(extension_for_rules_oci, "distroless_python3")
use_repo(extension_for_rules_oci, "distroless_base_amd64_oci")

bazel_dep(name = "container_structure_test", version="1.19.1")
