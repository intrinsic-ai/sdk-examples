module(name = "examples")

bazel_dep(name = "ai_intrinsic_sdks")
archive_override(
    module_name = "ai_intrinsic_sdks",
    # To pin a version change the following to, e.g.:
    #   urls = "https://github.com/intrinsic-ai/sdk/archive/refs/tags/intrinsic.platform.20221231.RC00.tar.gz",
    #   strip_prefix = "sdk-intrinsic.platform.20221231.RC00/"
    strip_prefix = "sdk-main/",
    urls = ["https://github.com/intrinsic-ai/sdk/archive/refs/heads/main.tar.gz"],
)

# Direct dependencies
bazel_dep(name = "abseil-cpp", version = "20250127.1", repo_name = "com_google_absl")
bazel_dep(name = "abseil-py", version = "2.1.0", repo_name = "com_google_absl_py")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "googletest", version = "1.15.2", repo_name = "com_google_googletest")
bazel_dep(name = "grpc", version = "1.71.0", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "protobuf", version = "29.4", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_go", version = "0.53.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "rules_python", version = "1.3.0")

# C++ toolchain
bazel_dep(name = "toolchains_llvm", version = "1.4.0")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "19.1.0",
)

non_module_deps = use_extension("@ai_intrinsic_sdks//bazel:non_module_deps.bzl", "non_module_deps_ext")
use_repo(non_module_deps, "com_googleapis_storage_chrome_linux_amd64_sysroot")

llvm.sysroot(
    label = "@com_googleapis_storage_chrome_linux_amd64_sysroot//:all_files",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")

# Google API bindings
bazel_dep(name = "googleapis", version = "0.0.0-20240819-fe8ba054a", repo_name = "com_google_googleapis")

switched_rules = use_extension("@com_google_googleapis//:extensions.bzl", "switched_rules")
switched_rules.use_languages(
    cc = True,
    go = True,
    grpc = True,
    python = True,
)
use_repo(switched_rules, "com_google_googleapis_imports")

# OCI images
bazel_dep(name = "rules_oci", version = "2.2.5")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
use_repo(
    oci,
    "distroless_base",
    "distroless_python3",
)

##########
# Go
##########
bazel_dep(name = "gazelle", version = "0.42.0", repo_name = "bazel_gazelle")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
use_repo(
    go_deps,
    "com_google_cloud_go_longrunning",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
)

##########
# Python
##########
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.11",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "scan_barcodes_pip_deps",
    python_version = "3.11",
    requirements_lock = "//skills/scan_barcodes:requirements.txt",
)
use_repo(pip, "scan_barcodes_pip_deps")
pip.parse(
    hub_name = "stopwatch_pip_deps",
    python_version = "3.11",
    requirements_lock = "//services/stopwatch:requirements.txt",
)
use_repo(pip, "stopwatch_pip_deps")
pip.parse(
    hub_name = "random_number_pip_deps",
    python_version = "3.11",
    requirements_lock = "//services/random_number:requirements.txt",
)
use_repo(pip, "random_number_pip_deps")

##########
# Containers
##########

bazel_dep(name = "container_structure_test", version = "1.19.1")

##########
# Non-bzlmod dependencies
##########

example_non_module_deps = use_extension("//bazel:non_module_deps.bzl", "non_module_deps_ext")
use_repo(example_non_module_deps, "opencv")
